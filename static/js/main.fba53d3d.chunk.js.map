{"version":3,"sources":["utils/fetchClient.ts","types/Status.ts","types/LocationEnum.ts","api/todos.ts","types/ErrorTypes.ts","components/Footer/Footer.tsx","components/Header/Header.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/Main/Main.tsx","components/ErrorMessages/ErrorMessages.tsx","utils/getVisibleTodos.ts","components/Login/Login.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","status","statusText","get","includes","json","Status","LocationEnum","client","getTodos","userId","createTodo","deleteTodo","updateTodo","ErrorTypes","Footer","itemsLeftCount","onDeleteCompletedTodo","isAnyTodoCompleted","location","useLocation","className","to","cn","selected","pathname","all","data-type","default","active","completed","type","onClick","style","visibility","Header","countActiveTodo","onHandleAddTodo","disabled","onChangeStatusAllTodo","haveNotTodos","useState","input","setInput","aria-label","onSubmit","event","preventDefault","placeholder","value","onChange","target","TodoItem","todo","onRemoveTodo","onChangeStatusTodo","setIdTodoForTempoTodo","onEditTodo","id","title","editing","setEditing","titleEdit","setTitleEdit","inputRef","useRef","useEffect","current","focus","htmlFor","toString","checked","prev","ref","onBlur","onKeyDown","key","onDoubleClick","TodoList","visibleTodos","idTodoForTempoTodo","map","Main","ErrorMessages","errorMessage","setErrorMessage","Login","setUserID","inputEmail","setInputEmail","handleGetUser","a","result","handleCreateUser","name","Math","random","toFixed","username","email","phone","usersColection","user","localStorage","setItem","Array","isArray","required","App","todos","setTodos","disableInput","setDisableInput","getItem","locationPath","todosArr","filter","getVisibleTodos","length","some","loadedTodos","ErrorGet","handleAddTodo","trim","todoTempo","createdTodo","ErrorPost","handleUpdateTodo","ErrorPatch","handleRemoveTodo","ErrorDelete","handleChangeStatusAllTodo","every","todosStatus","handleDeleteCompletedTodo","comletedTodos","todoPrev","todoEdited","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fba53d3d.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return new Error('Content-type is not supported');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum Status {\n  default = 'all',\n  active = 'active',\n  completed = 'comleted',\n}\n","// eslint-disable-next-line no-shadow\nexport enum LocationEnum {\n  all = '/',\n  active = '/active',\n  completed = '/completed',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (userId: number, data: unknown) => {\n  return client.post<Todo>(`/todos?userId=${userId}`, data);\n};\n\nexport const deleteTodo = (userId: number) => {\n  return client.delete(`/todos/${userId}`);\n};\n\nexport const updateTodo = (userId: number, data: unknown) => {\n  return client.patch<Todo>(`/todos/${userId}`, data);\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorTypes {\n  ErrorGet = 'Unable to load a todo',\n  ErrorPost = 'Unable to add a todo',\n  ErrorDelete = 'Unable to delete a todo',\n  ErrorPatch = 'Unable to update a todo',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Status } from '../../types/Status';\nimport { LocationEnum } from '../../types/LocationEnum';\n\ntype Props = {\n  itemsLeftCount: number,\n  onDeleteCompletedTodo: () => Promise<void>,\n  isAnyTodoCompleted: boolean,\n};\n\nexport const Footer: React.FC<Props> = ({\n  itemsLeftCount,\n  onDeleteCompletedTodo,\n  isAnyTodoCompleted,\n}) => {\n  const location = useLocation();\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeftCount} `}\n        items left\n      </span>\n\n      <nav className=\"filter\">\n        <Link\n          to=\"/\"\n          className={\n            cn(\n              'filter__link',\n              { selected: location.pathname === LocationEnum.all },\n            )\n          }\n          data-type={Status.default}\n        >\n          All\n        </Link>\n\n        <Link\n          to=\"active\"\n          className={\n            cn(\n              'filter__link',\n              { selected: location.pathname === LocationEnum.active },\n            )\n          }\n          data-type={Status.active}\n        >\n          Active\n        </Link>\n\n        <Link\n          to=\"completed\"\n          className={\n            cn(\n              'filter__link',\n              { selected: location.pathname === LocationEnum.completed },\n            )\n          }\n          data-type={Status.completed}\n        >\n          Completed\n        </Link>\n      </nav>\n\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={onDeleteCompletedTodo}\n        style={{ visibility: !isAnyTodoCompleted ? 'hidden' : 'visible' }}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  countActiveTodo: number,\n  onHandleAddTodo: (\n    input: string,\n    setInput: React.Dispatch<React.SetStateAction<string>>,\n  ) => void,\n  disabled: boolean,\n  onChangeStatusAllTodo: () => Promise<void>,\n  haveNotTodos: boolean,\n};\n\nexport const Header: React.FC<Props> = ({\n  countActiveTodo,\n  onHandleAddTodo,\n  disabled,\n  onChangeStatusAllTodo,\n  haveNotTodos,\n}) => {\n  const [input, setInput] = useState('');\n\n  const onChangeInput = (event : React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setInput(value);\n  };\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    onHandleAddTodo(input, setInput);\n  }\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        aria-label=\"button\"\n        className={\n          cn(\n            'todoapp__toggle-all',\n            { active: countActiveTodo > 0 },\n          )\n        }\n        onClick={onChangeStatusAllTodo}\n        style={{ visibility: haveNotTodos ? 'hidden' : 'visible' }}\n      />\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={input}\n          onChange={onChangeInput}\n          disabled={disabled}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, {\n  FC, useEffect, useRef, useState,\n} from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onRemoveTodo: (todo: Todo) => void\n  onChangeStatusTodo: (todo: Todo) => void,\n  setIdTodoForTempoTodo: React.Dispatch<React.SetStateAction<number[]>>,\n  onEditTodo: (todo: Todo) => void\n};\n\nexport const TodoItem: FC<Props> = ({\n  todo,\n  onRemoveTodo,\n  onChangeStatusTodo,\n  setIdTodoForTempoTodo,\n  onEditTodo,\n}) => {\n  const { id, title = '', completed } = todo;\n  const [editing, setEditing] = useState(false);\n  const [titleEdit, setTitleEdit] = useState(title);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleEdit(event.target.value);\n  };\n\n  const handleDoubleClick = () => {\n    setEditing(true);\n  };\n\n  const handleBlur = () => {\n    setEditing(false);\n    setTitleEdit(title);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onEditTodo({\n      ...todo,\n      title: titleEdit,\n    });\n    setIdTodoForTempoTodo((prev) => [...prev, id]);\n    setEditing(false);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setTitleEdit(title);\n      setEditing(false);\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className={cn('todo', { completed })}>\n      <label className=\"todo__status-label\" htmlFor={todo.id.toString()}>\n        <input\n          id={todo.id.toString()}\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={() => onChangeStatusTodo(todo)}\n        />\n      </label>\n      {editing ? (\n        <form onSubmit={handleSubmit}>\n          <input\n            ref={inputRef}\n            className=\"todo__title-field\"\n            type=\"text\"\n            value={titleEdit}\n            onChange={handleTitleChange}\n            onBlur={handleBlur}\n            onKeyDown={handleKeyDown}\n          />\n        </form>\n      ) : (\n        <span className=\"todo__title\" onDoubleClick={handleDoubleClick}>\n          {title}\n        </span>\n      )}\n      <button\n        type=\"button\"\n        className=\"todo__remove\"\n        onClick={() => onRemoveTodo(todo)}\n      >\n        ×\n      </button>\n      <div className=\"modal overlay\">\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[],\n  onRemoveTodo: (todo: Todo) => void\n  onChangeStatusTodo: (todo: Todo) => void,\n  idTodoForTempoTodo: number[],\n  setIdTodoForTempoTodo: React.Dispatch<React.SetStateAction<number[]>>\n  onEditTodo: (todo: Todo) => void\n};\n\nexport const TodoList: FC<Props> = ({\n  visibleTodos,\n  onRemoveTodo,\n  onChangeStatusTodo,\n  idTodoForTempoTodo,\n  setIdTodoForTempoTodo,\n  onEditTodo,\n}) => {\n  return (\n    <>\n      {visibleTodos.map((todo) => {\n        // adding tempo todo with loader\n        if (idTodoForTempoTodo.includes(todo.id)) {\n          return (\n            <div className=\"todo\" key={`todoTempo-${todo.id}`}>\n              <label className=\"todo__status-label\" htmlFor=\"todoStatusCheckbox\">\n                <input\n                  id=\"todoStatusCheckbox\"\n                  type=\"checkbox\"\n                  className=\"todo__status\"\n                />\n              </label>\n              <span\n                className=\"todo__title\"\n              >\n                {todo.title}\n              </span>\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n              >\n                ×\n              </button>\n\n              <div className=\"modal overlay is-active\">\n                <div className=\"modal-background has-background-white-ter\" />\n                <div className=\"loader\" />\n              </div>\n            </div>\n          );\n        }\n\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onRemoveTodo={onRemoveTodo}\n            onChangeStatusTodo={onChangeStatusTodo}\n            setIdTodoForTempoTodo={setIdTodoForTempoTodo}\n            onEditTodo={onEditTodo}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoList } from '../TodoList';\n\ntype Props = {\n  visibleTodos: Todo[],\n  onRemoveTodo: (todo: Todo) => void\n  onChangeStatusTodo: (todo: Todo) => void,\n  idTodoForTempoTodo: number[],\n  setIdTodoForTempoTodo: React.Dispatch<React.SetStateAction<number[]>>\n  onEditTodo: (todo: Todo) => void\n};\n\nexport const Main: React.FC<Props> = ({\n  visibleTodos,\n  onRemoveTodo,\n  onChangeStatusTodo,\n  idTodoForTempoTodo,\n  setIdTodoForTempoTodo,\n  onEditTodo,\n}) => {\n  return (\n    <section className=\"todoapp__main\">\n      <TodoList\n        visibleTodos={visibleTodos}\n        onRemoveTodo={onRemoveTodo}\n        idTodoForTempoTodo={idTodoForTempoTodo}\n        onChangeStatusTodo={onChangeStatusTodo}\n        setIdTodoForTempoTodo={setIdTodoForTempoTodo}\n        onEditTodo={onEditTodo}\n      />\n    </section>\n  );\n};\n","import React from 'react';\nimport { ErrorTypes } from '../../types/ErrorTypes';\n\ntype Props = {\n  errorMessage: ErrorTypes,\n  setErrorMessage: React.Dispatch<React.SetStateAction<ErrorTypes | null>>\n};\n\nexport const ErrorMessages: React.FC<Props> = (\n  { errorMessage, setErrorMessage },\n) => {\n  return (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      <button\n        type=\"button\"\n        aria-label=\"button\"\n        className=\"delete\"\n        onClick={() => setErrorMessage(null)}\n      />\n\n      {errorMessage}\n      <br />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { LocationEnum } from '../types/LocationEnum';\n\nexport const getVisibleTodos = (locationPath: string, todosArr: Todo[]) => {\n  switch (locationPath) {\n    case LocationEnum.active:\n      return todosArr.filter(todo => !todo.completed);\n    case LocationEnum.completed:\n      return todosArr.filter(todo => todo.completed);\n    default:\n      return todosArr;\n  }\n};\n","import React, { useState } from 'react';\nimport { createUser, getUser } from '../../api/users';\nimport { User } from '../../types/User';\n\ntype Props = {\n  setUserID: React.Dispatch<React.SetStateAction<string | number>>,\n  loadedTodos: () => Promise<void>,\n  userId: string | number,\n};\n\nexport const Login: React.FC<Props> = ({ setUserID, userId }) => {\n  const [inputEmail, setInputEmail] = useState<string>('');\n\n  const handleGetUser = async (\n    input: string,\n  ) => {\n    let result;\n\n    try {\n      result = await getUser(input);\n\n      return result;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const handleCreateUser = async (\n    input: string,\n  ) => {\n    let result;\n\n    try {\n      result = await createUser(input, {\n        name: `User-${(Math.random() * 1000).toFixed()}`,\n        username: 'UserName',\n        email: input,\n        phone: 123456789,\n      });\n\n      return result;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  async function handleLoginForm(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const usersColection = await handleGetUser(inputEmail) as User | User[];\n\n    if (userId === 0) {\n      const user = await handleCreateUser(inputEmail) as User;\n\n      if (user) {\n        setUserID(user.id);\n        localStorage.setItem('userId', `${user.id}`);\n      }\n    }\n\n    if (Array.isArray(usersColection)) {\n      setUserID(usersColection[0].id);\n      localStorage.setItem('userId', `${usersColection[0].id}`);\n    }\n\n    if (usersColection && 'id' in usersColection) {\n      setUserID(usersColection.id);\n      localStorage.setItem('userId', `${usersColection.id}`);\n    }\n  }\n\n  return (\n    <section className=\"section\">\n      <div className=\"box is-size-3\">\n        <h1>Log in to open todos</h1>\n        <span className=\"highlight\">Email</span>\n        <form onSubmit={handleLoginForm}>\n          <input\n            type=\"email\"\n            value={inputEmail}\n            placeholder=\"Enter your email\"\n            onChange={({ target }) => setInputEmail(target.value)}\n            required\n          />\n          <br />\n          <button type=\"submit\">Login</button>\n        </form>\n      </div>\n    </section>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUser = (email: string) => {\n  return client.get<User[]>(`/users?email=${email}`);\n};\n\nexport const createUser = (email: string, data: unknown) => {\n  return client.post<User>('/users', data);\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Todo } from './types/Todo';\nimport {\n  createTodo, getTodos, deleteTodo, updateTodo,\n} from './api/todos';\nimport { Footer } from './components/Footer/Footer';\nimport { Header } from './components/Header/Header';\nimport { Main } from './components/Main/Main';\nimport { ErrorMessages } from './components/ErrorMessages/ErrorMessages';\nimport { ErrorTypes } from './types/ErrorTypes';\nimport { getVisibleTodos } from './utils/getVisibleTodos';\nimport { Login } from './components/Login/Login';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [disableInput, setDisableInput] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<ErrorTypes | null>(null);\n  const [idTodoForTempoTodo, setIdTodoForTempoTodo] = useState<number[]>([]);\n  const [userId, setUserID] = useState(() => localStorage.getItem('userId') || 0);\n  const location = useLocation();\n\n  const visibleTodos = getVisibleTodos(location.pathname, todos);\n\n  const itemsLeftCount = todos.filter(todo => !todo.completed).length;\n\n  const isAnyTodoCompleted = todos.some(todo => todo.completed === true);\n\n  const haveNotTodos = todos.length === 0;\n\n  async function loadedTodos() {\n    try {\n      const result = await getTodos(+userId);\n\n      setTodos(result);\n      setErrorMessage(null);\n    } catch (error) {\n      setErrorMessage(ErrorTypes.ErrorGet);\n    }\n  }\n\n  const handleAddTodo = async (\n    input: string,\n    setInput: React.Dispatch<React.SetStateAction<string>>,\n  ) => {\n    if (input.trim()) {\n      setDisableInput(true);\n      const todoTempo = {\n        id: 0,\n        userId: +userId,\n        title: input,\n        completed: false,\n      };\n\n      setTodos(prev => [...prev, todoTempo]);\n\n      setIdTodoForTempoTodo((prev) => [...prev, todoTempo.id]);\n\n      setInput('');\n      try {\n        const createdTodo = await createTodo(+userId, {\n          title: input,\n          userId: +userId,\n          completed: false,\n        });\n\n        setTodos(prev => prev.filter(todo => todo.id !== 0));\n        setTodos(prev => [...prev, createdTodo]);\n        setDisableInput(false);\n        setIdTodoForTempoTodo([]);\n        setErrorMessage(null);\n      } catch (error) {\n        setErrorMessage(ErrorTypes.ErrorPost);\n        setDisableInput(false);\n      }\n    }\n  };\n\n  const handleUpdateTodo = async (todo: Todo) => {\n    await setIdTodoForTempoTodo((prev) => [...prev, todo.id]);\n    try {\n      await updateTodo(todo.id, {\n        title: todo.title,\n        completed: todo.completed,\n      });\n      setErrorMessage(null);\n      setIdTodoForTempoTodo([]);\n    } catch (error) {\n      setErrorMessage(ErrorTypes.ErrorPatch);\n    }\n  };\n\n  const handleRemoveTodo = async (todo: Todo) => {\n    setIdTodoForTempoTodo((prev) => [...prev, todo.id]);\n\n    try {\n      await deleteTodo(todo.id);\n      setTodos(prev => prev.filter(({ id }) => id !== todo.id));\n      setErrorMessage(null);\n      setIdTodoForTempoTodo([]);\n    } catch (error) {\n      setErrorMessage(ErrorTypes.ErrorDelete);\n    }\n  };\n\n  const handleChangeStatusTodo = (\n    todo: Todo,\n  ) => {\n    setTodos(todos.map((todoPrev) => {\n      if (todo.id === todoPrev.id) {\n        handleUpdateTodo({ ...todo, completed: !todo.completed });\n\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todoPrev;\n    }));\n  };\n\n  const handleChangeStatusAllTodo = async () => {\n    try {\n      const todosStatus = await Promise.all(todos.map(\n        ({ id }) => {\n          setIdTodoForTempoTodo((prev) => [...prev, id]);\n\n          return updateTodo(id, {\n            completed: !todos.every(todo => todo.completed),\n          });\n        },\n      ));\n\n      setTodos(todosStatus);\n      setIdTodoForTempoTodo([]);\n    } catch {\n      setErrorMessage(ErrorTypes.ErrorPatch);\n    }\n  };\n\n  const handleDeleteCompletedTodo = async () => {\n    try {\n      const comletedTodos = todos.filter(todo => todo.completed);\n\n      await Promise.all(comletedTodos.map(async todo => {\n        setIdTodoForTempoTodo((prev) => [...prev, todo.id]);\n\n        await deleteTodo(todo.id);\n      }));\n\n      setTodos(prev => prev.filter(todo => todo.completed === false));\n      setIdTodoForTempoTodo([]);\n    } catch (error) {\n      setErrorMessage(ErrorTypes.ErrorDelete);\n    }\n  };\n\n  const handleEditTodo = (\n    todoEdited: Todo,\n  ) => {\n    setTodos(visibleTodos.map((todo) => {\n      if (todo.id !== todoEdited.id) {\n        return todo;\n      }\n\n      handleUpdateTodo({ ...todo, title: todoEdited.title });\n\n      return { ...todo, title: todoEdited.title };\n    }));\n  };\n\n  useEffect(() => {\n    loadedTodos();\n  }, [userId]);\n\n  return (\n    <div className=\"todoapp\">\n      {userId ? (\n        <>\n          <h1 className=\"todoapp__title\">todos</h1>\n          <div className=\"todoapp__content\">\n\n            <Header\n              countActiveTodo={itemsLeftCount}\n              onHandleAddTodo={handleAddTodo}\n              disabled={disableInput}\n              onChangeStatusAllTodo={handleChangeStatusAllTodo}\n              haveNotTodos={haveNotTodos}\n            />\n\n            <Main\n              visibleTodos={visibleTodos}\n              onRemoveTodo={handleRemoveTodo}\n              onChangeStatusTodo={handleChangeStatusTodo}\n              idTodoForTempoTodo={idTodoForTempoTodo}\n              setIdTodoForTempoTodo={setIdTodoForTempoTodo}\n              onEditTodo={handleEditTodo}\n            />\n\n            {!!todos.length && (\n              <Footer\n                itemsLeftCount={itemsLeftCount}\n                onDeleteCompletedTodo={handleDeleteCompletedTodo}\n                isAnyTodoCompleted={isAnyTodoCompleted}\n              />\n            )}\n\n            {errorMessage\n            && (\n              <ErrorMessages\n                errorMessage={errorMessage}\n                setErrorMessage={setErrorMessage}\n              />\n            )}\n          </div>\n\n        </>\n      ) : (\n        <Login setUserID={setUserID} loadedTodos={loadedTodos} userId={userId} />\n      )}\n\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}